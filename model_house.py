# -*- coding: utf-8 -*-
"""model_house.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dyJ7XmhRHO8kKYnKzXW0weoGLiJsKfIO
"""

import pickle
import numpy as np
import pandas as pd
#import opendatasets as od
from sklearn.linear_model import LinearRegression

df_train = pd.read_csv('train.csv')
df_train.head()

total = df_train.isnull().sum().sort_values(ascending=False)
percent = (df_train.isnull().sum()/df_train.isnull().count()).sort_values(ascending=False)
missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])

df_train = df_train.drop((missing_data[missing_data['Total'] > 1]).index,1)
df_train = df_train.drop(df_train.loc[df_train['Electrical'].isnull()].index)
df_train.isnull().sum().max()

feature_df = df_train[['LotArea', 'HouseStyle', 'Neighborhood', 'YearBuilt', 'FullBath', 'BedroomAbvGr', 'CentralAir', 'GarageCars', 'SalePrice']]

from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder

feature_df['HouseStyle'] = feature_df['HouseStyle'].astype('category')
feature_df['HouseStyle_num'] = feature_df['HouseStyle'].cat.codes

feature_df['Neighborhood'] = feature_df['Neighborhood'].astype('category')
feature_df['Neighborhood_num'] = feature_df['Neighborhood'].cat.codes

#feature_df['Heating'] = feature_df['Heating'].astype('category')
#feature_df['Heating_num'] = feature_df['Heating'].cat.codes

feature_df['CentralAir'] = feature_df['CentralAir'].astype('category')
feature_df['CentralAir_num'] = feature_df['CentralAir'].cat.codes

#feature_df['SaleType'] = feature_df['SaleType'].astype('category')
#feature_df['SaleType_num'] = feature_df['SaleType'].cat.codes

enc = OneHotEncoder()

enc_data = pd.DataFrame(enc.fit_transform(
    feature_df[['HouseStyle_num', 'Neighborhood_num', 'CentralAir_num']]).toarray())

new_df = feature_df.join(enc_data)

print(new_df)

def predict(arr):
  colFeat = ('LotArea', 'HouseStyle_num', 'Neighborhood_num', 'YearBuilt', 'FullBath', 'BedroomAbvGr', 'CentralAir_num', 'GarageCars', 'SalePrice')
  new_df.columns = new_df.columns.str.strip() #cleaning up the columns to avoid later issues
  df_feat = new_df[list(colFeat)].fillna(0) #Ends any empty/Na values with 0

  X = df_feat.drop('SalePrice', axis=1)
  y = df_feat['SalePrice']

  reg = LinearRegression().fit(X, y)
  coefficients = reg.coef_
  intercept = reg.intercept_
  prediction = np.dot(coefficients, arr) + intercept

  return prediction